// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: tdl.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tdl_GetAction_FullMethodName = "/tdl.Tdl/GetAction"
	Tdl_RunScript_FullMethodName = "/tdl.Tdl/RunScript"
	Tdl_AuthInput_FullMethodName = "/tdl.Tdl/AuthInput"
)

// TdlClient is the client API for Tdl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TdlClient interface {
	// Sends a greeting
	GetAction(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	RunScript(ctx context.Context, in *RunScriptRequest, opts ...grpc.CallOption) (*RunScriptResponse, error)
	AuthInput(ctx context.Context, in *AuthInputRequest, opts ...grpc.CallOption) (*AuthInputResponse, error)
}

type tdlClient struct {
	cc grpc.ClientConnInterface
}

func NewTdlClient(cc grpc.ClientConnInterface) TdlClient {
	return &tdlClient{cc}
}

func (c *tdlClient) GetAction(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, Tdl_GetAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tdlClient) RunScript(ctx context.Context, in *RunScriptRequest, opts ...grpc.CallOption) (*RunScriptResponse, error) {
	out := new(RunScriptResponse)
	err := c.cc.Invoke(ctx, Tdl_RunScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tdlClient) AuthInput(ctx context.Context, in *AuthInputRequest, opts ...grpc.CallOption) (*AuthInputResponse, error) {
	out := new(AuthInputResponse)
	err := c.cc.Invoke(ctx, Tdl_AuthInput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TdlServer is the server API for Tdl service.
// All implementations must embed UnimplementedTdlServer
// for forward compatibility
type TdlServer interface {
	// Sends a greeting
	GetAction(context.Context, *ActionRequest) (*ActionResponse, error)
	RunScript(context.Context, *RunScriptRequest) (*RunScriptResponse, error)
	AuthInput(context.Context, *AuthInputRequest) (*AuthInputResponse, error)
	mustEmbedUnimplementedTdlServer()
}

// UnimplementedTdlServer must be embedded to have forward compatible implementations.
type UnimplementedTdlServer struct {
}

func (UnimplementedTdlServer) GetAction(context.Context, *ActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAction not implemented")
}
func (UnimplementedTdlServer) RunScript(context.Context, *RunScriptRequest) (*RunScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunScript not implemented")
}
func (UnimplementedTdlServer) AuthInput(context.Context, *AuthInputRequest) (*AuthInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthInput not implemented")
}
func (UnimplementedTdlServer) mustEmbedUnimplementedTdlServer() {}

// UnsafeTdlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TdlServer will
// result in compilation errors.
type UnsafeTdlServer interface {
	mustEmbedUnimplementedTdlServer()
}

func RegisterTdlServer(s grpc.ServiceRegistrar, srv TdlServer) {
	s.RegisterService(&Tdl_ServiceDesc, srv)
}

func _Tdl_GetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TdlServer).GetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tdl_GetAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TdlServer).GetAction(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tdl_RunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TdlServer).RunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tdl_RunScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TdlServer).RunScript(ctx, req.(*RunScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tdl_AuthInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TdlServer).AuthInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tdl_AuthInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TdlServer).AuthInput(ctx, req.(*AuthInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tdl_ServiceDesc is the grpc.ServiceDesc for Tdl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tdl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tdl.Tdl",
	HandlerType: (*TdlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAction",
			Handler:    _Tdl_GetAction_Handler,
		},
		{
			MethodName: "RunScript",
			Handler:    _Tdl_RunScript_Handler,
		},
		{
			MethodName: "AuthInput",
			Handler:    _Tdl_AuthInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tdl.proto",
}
